import Celos.*
import EstadosDeAnimo.*
import Personalidades.*
import Relaciones.*
import Sim.*
import Trabajos.*

test "29. Hacer que un Sim vaya a trabajar." {

	var pepe = new Sim("masculino", 30, 100, [], interesado, 100, "femenino")	
	pepe.asignarTrabajoAburrido(5000, 10)
	pepe.trabajar()
	assert.that((pepe.dinero() == 5100) and (pepe.nivelFelicidad() == 90))

}

test "29. Hacer que un Sim desocupado Sim vaya a trabajar" {

	var pepe = new Sim("masculino", 30, 100, [], interesado, 100, "femenino")	
	pepe.trabajar()
	assert.that((pepe.dinero() == 100) and (pepe.nivelFelicidad() == 100))

}

//Entrega 2

//4.Hacer que el Sim cambie su estado de ánimo (si corresponde) cuando va a trabajar.

test "4-a. Un sim empleado va a trabajar y su estado de animo cambia a normal" {

	var pepe = new Sim("masculino", 30, 100, [], interesado, 100, "femenino")	
	pepe.asignarTrabajoAburrido(5000, 10)
	pepe.estadoDeAnimo(incomodo)
	pepe.trabajar()
	assert.that(pepe.estadoDeAnimo() === normal)
}

test "4-b. Un sim Desempleado va a trabajar y su estado de animo no cambia" {

	var pepe = new Sim("masculino", 30, 100, [], interesado, 100, "femenino")	
	pepe.estadoDeAnimo(incomodo)
	pepe.trabajar()
	assert.equals(pepe.estadoDeAnimo(),incomodo)
}

/*30. Â¿Hay alguna repeticiÃ³n de lÃ³gica que sea imposible salvar con las herramientas vistas
hasta ahora?
SÃ­, las asignaciones de los Tipos de Trabajos que tienen que ser una por caso en vez de generalizar y crear un 'new TipoDeTrabajo'*/
